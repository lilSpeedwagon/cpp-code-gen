#!/usr/bin/python
from os import error
import sys
import subprocess


# colorize output
COLOR = {
    'red': '\033[1;31m',
    'green': '\033[1;32m',
    'yellow': '\033[1;33m',
    'off': '\033[1;m'
}

def system(*args):
    """
    Run system command.
    """
    proc = subprocess.Popen(args, stdout=subprocess.PIPE)
    out, err = proc.communicate(timeout=5)
    return out


def get_changed_files():
    """
    Get python files from 'files to commit' git cache list.
    """
    files = []
    filelist = system('git', 'diff', '--cached', '--name-status').strip()
    for line in filelist.decode("utf-8").split('\n'):
        """
        M/A <filename> - for modified items
        R<num> <from filename> <to filename> - for moved items
        """
        line_items = line.strip().split('\t')
        action = line_items[0]
        filename = line_items[-1]
        if filename.endswith('.py') and action != 'D':
            files.append(filename)
    return files


def lint(files):
    """
    Run pep8 or flake8 lint.
    """
    args = ['pycodestyle']
    args.extend(files)
    errors = system(*args).decode("utf-8").strip().split('\n')
    return list(filter(None, errors))


def main():
    files = get_changed_files()
    if not files:
        print("Python lint: %(yellow)sSKIP%(off)s" % COLOR)
        return

    errors = lint(files)

    if not errors:
        print("Python lint: %(green)sOK%(off)s" % COLOR)
        return

    print("Python lint: %(red)sFAIL%(off)s\n" % COLOR)
    print("\n".join(sorted(errors)))
    print("\nAborting commit due to python lint errors.")
    sys.exit(1)


if __name__ == '__main__':
    main()